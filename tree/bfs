   queue<treenode*>tree;
   q.push(root);

    while (q.empty() == false) {
        
        // Print front of queue and remove it from queue
        Node* node = q.front();
        cout << node->data << " ";
        q.pop();

        // Enqueue left child
        if (node->left != nullptr)
            q.push(node->left);

        // Enqueue right child
        if (node->right != nullptr)
            q.push(node->right);
    }
}
level order traversal where in u swap the values of left and right node- 
class Solution {
public:

    TreeNode* reverseOddLevels(TreeNode* root) {
          int level=0;
          queue<TreeNode*>q;
          if(root!=NULL){
          q.push(root);}
          vector<TreeNode*>tr;
          int k=0;
          while(!q.empty()){
              vector<TreeNode*>tr;
              int n=q.size();
              while(n--){
            TreeNode *temp=q.front();
            q.pop();
            tr.push_back(temp);
            if(temp->left!=NULL){
            q.push(temp->left);}
            if(temp->right!=NULL){
            q.push(temp->right);}
              }
              k++;
              if(k%2!=1){
              //time for reversal
              int i=0;
              int j=tr.size()-1;
              while(i<j){
                swap(tr[i]->val,tr[j]->val);
                i++;
                j--;
              }}
            
          }
          
return root;
    }
};
invert tree 
 TreeNode* invertTree(TreeNode* root) {
     
          int level=0;
          queue<TreeNode*>q;
          if(root!=NULL){
          q.push(root);}
          vector<TreeNode*>tr;
          int k=0;
          while(!q.empty()){
            
           TreeNode *temp=q.front();
           q.pop();
           //swap
           TreeNode *tempest=temp->left;
           temp->left=temp->right;
           temp->right=tempest;
           
           if(temp->left){
            q.push(temp->left);
           }
           if(temp->right){
            q.push(temp->right);
           }

            
              }
            
          
          
return root;}
    

    
};