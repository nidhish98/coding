ass Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) {
        int n=nums.size();
        vector<int>ans;
        int i=0;
        int j=n-1;
        while(i<j){
            if(nums[i]%2==0 && nums[j]%2==0){
            i++;
            }
             else if(nums[i]%2==0 && nums[j]%2!=0){
                i++;
            j--;
            }
            else if(nums[i]%2!=0 && nums[j]%2==0){
            swap(nums[i],nums[j]);
            }
           else  if(nums[i]%2!=0 && nums[j]%2!=0){
         j--;
            }

            
        }
        return nums;
    }
};
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
       int i=1;
       int n=nums.size();
       vector<int>temp;
       temp.push_back(nums[0]);
       while(i<n){
        if(nums[i]!=nums[i-1]){
        temp.push_back(nums[i]);
        i++;
        }
        else {
            i++;
        }
       }
       for(int i=0;i<temp.size();i++){
        cout<<temp[i];
       }
    nums=temp;
    

         
       return nums.size(); 
    }  
};
removing duplicate 
olution {
    public:
        int removeDuplicates(vector<int>& nums) {
             //is for unique element 
             //j is used for finding that unique element
             vector<int>temp;
             int n=nums.size();
             int i=0;
             int j=0;
             while(i<n && j<n){
                if(nums[i]!=nums[j]){
                    nums[i+1]=nums[j];
                    i++;
                    j++;
                }
                else if(nums[i]==nums[j]){
                    j++;
                }
             }
             for(int k=0;k<=i;k++){
                temp.push_back(nums[k]);
             }
             nums=temp;
             
           return nums.size(); 
        }  
    };