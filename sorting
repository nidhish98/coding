ascending
void findMin(int x, int arr[], int n) {
    int minim = arr[x];
    for (int i = x; i < n; i++) {
        if (arr[i] < minim) {
            minim = arr[i];
        }
    }
    std::cout << minim << " ";
    
}

int main() {
    int n;
    std::cin >> n;
    
    int arr[n];
    for (int i = 0; i < n; i++) {
        std::cin >> arr[i];
    }

    for (int i = 0; i < n; i++) {
        findMin(i, arr, n);
    }

    return 0;
}
selection-
#include<bits/stdc++.h>

using namespace std;
void selection_sort(int arr[], int n) {
  // selection sort
  for (int i = 0; i < n - 1; i++) {
    int mini = i;
    for (int j = i + 1; j < n; j++) {
      if (arr[j] < arr[mini]) {
        mini = j;
      }
    }
    int temp = arr[mini];
    arr[mini] = arr[i];
    arr[i] = temp;
  }

  cout << "After selection sort: " << "\n";
  for (int i = 0; i < n; i++) {
    cout << arr[i] << " ";
  }
  cout << "\n";

}                  //insane 
int main() {
  int arr[] = {13,46,24,52,20,9};
  int n = sizeof(arr) / sizeof(arr[0]);
   cout << "Before selection sort: " << "\n";
   for (int i = 0; i < n; i++) {
    cout << arr[i] << " ";
  }
  cout << "\n";
  selection_sort(arr, n);
  return 0;
bubble sort void bubbleSort(int arr[], int n)
{
    // Yforour code here   
    
    for(int i=n-1;i>=0;i--){
           for(int j=0;j<=i-1;j++){
               if(arr[j]>arr[j+1]){
                   int temp = arr[j + 1];
                arr[j + 1] = arr[j];
                arr[j] = temp; 
               }
           }
    }
    
}
sorting pair of vectord
vector<pair<int, int>> v = {{2, 3}, {1, 5}, {4, 2}, {1, 3}};

    // Sort the vector of pairs based on the first element of each pair
    sort(v.begin(), v.end());
 

 // Sort the vector of pairs based on the second element of each pair
    sort(v.begin(), v.end(),sortBySecond
    );
    sort by comperator function
    used in bool function
******************************************************************************/
#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node in the BST
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Helper function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Helper function to find the minimum value node in a subtree
struct Node* findMin(struct Node* node) {
    struct Node* current = node;
    while (current && current->left != NULL) {
        current = current->left;
    }
    return current;
}

// Function to delete a node from the BST
struct Node* deleteNode(struct Node* root, int key) {
   

    // Recursive cases: search for the node to be deleted
    if (key < root->data) {
        // If the key to be deleted is smaller than root's key, go to the left subtree
        root->left = deleteNode(root->left, key);
    } else if (key > root->data) {
        // If the key to be deleted is greater than root's key, go to the right subtree
        root->right = deleteNode(root->right, key);
    } else {
        // Node to be deleted is found

        // Case 1: Node has no child (is a leaf node)
        if (root->left == NULL && root->right == NULL) {
            free(root);
            return NULL;
        }

        // Case 2: Node has one child
        if (root->left == NULL) {
            struct Node* temp = root->right;
            free(root);
            return temp;
            
        } 
        else if (root->right == NULL) {
            struct Node* temp = root->left;
            free(root);
            return temp;
        }

        // Case 3: Node has two children
        // Find the in-order successor (smallest value in the right subtree)
        struct Node* temp = findMin(root->right);

        // Copy the in-order successor's content to this node
        root->data = temp->data;

        // Delete the in-order successor
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

// Function to insert a new node in the BST
struct Node* insert(struct Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insert(root->left, data);
    } else {
        root->right = insert(root->right, data);
    }
    return root;
}

// Helper function to print the tree (in-order traversal)
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

// Main function
int main() {
    struct Node* root = NULL;
    root = insert(root, 50);
    root = insert(root, 30);
    root = insert(root, 20);
    root = insert(root, 40);
    root = insert(root, 70);
    root = insert(root, 60);
    root = insert(root, 80);

    printf("Inorder traversal of the BST: ");
    inorder(root);
    printf("\n");

    printf("Delete node 20\n");
    root = deleteNode(root, 20);
    printf("Inorder traversal of the modified BST: ");
    inorder(root);
    printf("\n");

    printf("Delete node 30\n");
    root = deleteNode(root, 30);
    printf("Inorder traversal of the modified BST: ");
    inorder(root);
    printf("\n");

    printf("Delete node 50\n");
    root = deleteNode(root, 50);
    printf("Inorder traversal of the modified BST: ");
    inorder(root);
    printf("\n");

    return 0;
} nbjhbhbhjbjhbhjb
