check if array sorted
for(int i=1;i<n;i++){
    if(arr[i]>arr[i-1]){
        count
    }
    else{
        return false;
    }
}
    return true;
}
FOR Q IN ARR[I+1]/ARR[I-1]
            LAST    FIRST 
            
  

i>=n-2


-----------------------------------------------------------------------
second largest

--------ARR[I]-------MAX1---MAX2
-------MAX1--AR[I]---MAX2
-------MAX


rotated by 1 place left
first element in temp 
for(int i=1;i<n;i++)
arr[i-1]=arr[i]
}
temp
//if u want to add vector +number
code
//4,9,3,2       +123
        ^p         ^p 

 multiply except itself
 class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        
    //left=0 to (nums[i-1])
    //right = nums[i+1] to nums[n-1];
   // answer=left*right
   int n=nums.size();
    vector<int>left(n);
     vector<int>right(n);
     left[0]=1;
     right[n-1]=1;
     for(int i=1;i<n;i++){
        left[i]=nums[i-1]*left[i-1];
     }
     for(int j=n-2;j>=0;j--){
        right[j]=nums[j+1]*right[j+1];}
        vector<int>ans(n);
        for(int i=0;i<n;i++){
            ans[i]=left[i]*right[i];
        }                              make left array make right array then multiply
     
    
     
   return ans;
    }
};

3sum arr1+arr2_arr3=sum
class Solution {
    


public:
    vector<vector<int>> threeSum(vector<int>& nums) {
 sort(nums.begin(),nums.end());     
vector<int>ans;
vector<vector<int>>fin;
int n=nums.size();
for(int i=0;i<nums.size();i++){
    if(i>0 && nums[i]==nums[i-1]){
        continue;
    }
    int target=-nums[i];    
int left=i+1;
int end=n-1;
while(left<end){
    
    int sum=nums[left]+nums[end];
    if(sum==target){
      while(left<end && nums[left]==nums[left+1]){
        left++;
      }
      while(left<end && nums[end]==nums[end-1]){
            end--;
        }

         fin.push_back({-target, nums[left], nums[end]});
      
        left++;
        end--;

    }
    else if(nums[left]+nums[end]<target){
       left++;
    }
    else{
     end--;
        }
    
}                   //1 2 3 ..1+2+3=0 //2+3=-1    ..ek baar target to uske uper sab
}                                                       
return fin;

   
    }
};  can also use set to store value (unique)
   

   if u want to find subbarray contigous
   123 
   1 2 3 12 123 2 23 3 
   brute 
   
   for(int i=0; i<n; i++){
            int product = 1;
            for(int j=i; j<n; j++){
                product *= nums[j];
                if(product > maxProduct){
                    maxProduct = product;
                }
                kadanes algorithm for maximum subbarray sum
                nt maxSubArray(vector<int>& nums) {
        int n=nums.size();
        int maxsum=INT_MIN;
        int sum=0;
        for(int i=0;i<n;i++){
            if(sum==0){
                startindex=i;    //suppose printing array
            }
            sum=sum+nums[i];
            if(maxsum<sum){
                maxsum=sum;
                endindex=i;    //suppose printing array
            }
         if(sum<0){
            sum=0;
         }
    }
    return maxsum;
    }
};
};
//longest consecutive sequence in array
class Solution {
    bool check(vector<int>nums,int target){
        int n=nums.size();
        for(int i=0;i<n;i++){
            if(nums[i]==target){
                return true;
            }
        }
        return false;
    }
public:
    int longestConsecutive(vector<int>& nums) {
       //brute
       int n=nums.size();
       int maximum=0;
       for(int i=0;i<n;i++){
        int no=nums[i];
        int count=0;
        while(check(nums,no)==true){
          no=no+1;
             count++;
        }
            
            maximum=max(maximum,count);
        }
       
        
        return maximum;
    }
};
 int n=nums.size();
        sort(nums.begin(),nums.end());
         int lastsmaller=INT_MIN;
         int maximum=INT_MIN;
         int count=1;
         for(int i=0;i<n;i++){
            if(nums[i]==lastsmaller){
                
            }
            else if(nums[i]-1==lastsmaller){
                count=count+1;
                lastsmaller=nums[i];
            }
            else if(nums[i]!=lastsmaller){
                count=1;
                 lastsmaller=nums[i];

            }
             maximum=max(count,maximum);
            
         }
        return maximum;
    }
};
rotate array by k places
class Solution {
    public:
    void reverse(vector<int>& nums,int start, int end){
        while(start<=end){
          swap(nums[start],nums[end]);
          start++;
          end--;
    }}
        
    
        void rotate(vector<int>& nums, int k) {
              
            int n=nums.size();
             k=k%n;
           
            reverse(nums,0,n-k-1);
           reverse(nums,n-k,n-1);
             reverse(nums,0,n-1);
           
        }
        
    }; //prefix questions subb
    subbarray sum equals k 
    int subarraysDivByK(vector<int>& nums, int k) {
        int sum=0;
        int count=0;
        int n=nums.size();
        unordered_map<int,int>mpp;
        
        for(int i=0;i<n;i++){
         sum=sum+nums[i];
         nums[i]=sum;
         cout<<nums[i]<<endl;
        }
        mpp[0]=1;
        for(int i=0;i<n;i++){
         int x=nums[i]%k;
            if(x<0){
             x=(x)+k;
            }
          if(mpp.find(x)!=mpp.end()){ //mil gaya
    count=count+mpp[x];
 
          }
          mpp[x]++;
 
        }
        return count;
     }
 };
 subbarray sum =k 
 int subarraySum(vector<int>& nums, int k) {
    int result = 0;
    int sum = 0;
    map<int, int> mp;
    mp.insert({0,1});
    int n = nums.size();
    for(int i = 0; i<n; i++) {
        sum += nums[i];
        
        if(mp.count(sum-k))
            result += mp[sum-k];
        
        mp[sum]++;
    }
    return result;
}
};


