stoi and to_string
string me dont add use push_back
string s = "10";
int x = ?
int x = stoi(s);   // x = 10


int x =10;
string s=?
strring s = to_string(x)



-----------------------------
reverse(s.begin(),s.end())
s.substr(0,3)
printing from index to length 3


largest odd no 
class Solution {
public:
    string largestOddNumber(string num) {
        vector<int>ans;
        int n=num.length();
       

            if((num[n-1]-'0')%2!=0){
                return num;  //odd
            }
            else{
             for(int i=n-1;i>=0;i--){
                
            if((num[i]-'0')%2!=0){
                return num.substr(0,i+1);

             }
            }
            }

            return "";
    }

  
};
a way of chekcing if ek ke baad ek same or different
for(int i=0;i<password.length()-1;i++){  //subbaray
    for(int j=i+1;j<password.length();j++){
        for(int k=i;k<j;k++){
      if(password[k]==password[k+1]){
     return false;
        break;
      }}
}   k=1,n
or while(k<n-1 &&k>0){
    if(password[k]==password[k-1]){
        return false;
    }
    k++;
}
important string question valid palindrome
class Solution {
    char tolo(char c){
        if(c>='a' && c<='z'){
            return c;
        }
        else if(c>='A' && c<='Z'){
            return c-'A'+'a';
        }
        else if(c>='0' && c<='9'){
            return c;
        }
        
        return 'a';
    }
    bool alpha(char c){
         if(c>='a' && c<='z'){
            return false;
        }
        else if(c>='A' && c<='Z'){
            return false;
        }
         else if(c>='0' && c<='9'){
            return false;
        }
        return true;
    }
    
public:
    bool isPalindrome(string s) {
       int i=0;
       int j=s.length()-1;
       while(i<=j){ 
       while( i<j && alpha(s[i])){
        i++;
       }
       while(i<j && alpha(s[j])){
        j--;
        cout<<j<<endl; 
       }
     if (tolo(s[i])!=tolo(s[j])){
        return false;
       }
       i++;
       j--;
        }
       


       
       
  
   return true;
    }
};
#include <iostream>
using namespace std;

long repeatedString(string s, long n) {
    long count = 0;

    // Case when string length is greater than or equal to n
    if (s.length() >= n) {
        for (int i = 0; i < n; i++) { // Use n, not 10
            if (s[i] == 'a') {
                count++;
            }
        }
        return count;
    }

    // Case when n is larger than the string length
    long conc1 = n / s.length();  // How many full times the string fits in n
    long count2 = 0, count3 = 0;

    // Count 'a' in the full string s
    for (int i = 0; i < s.length(); i++) {
        if (s[i] == 'a') {
            count2++;
        }
    }

    // Calculate the remainder of the string (partial repetition)
    long rem = n % s.length();

    // Count 'a' in the remainder part
    for (int i = 0; i < rem; i++) {
        if (s[i] == 'a') {
            count3++;
        }
    }

    // Total 'a' = (count2 * number of full repetitions) + 'a' count in the remainder
    return (count2 * conc1) + count3;
}

int main() {
    string s = "abcac";
    long n = 10;
    cout << repeatedString(s, n) << endl;  // Expected output: 4
    return 0;
}

c++
adding string (convert int into string )
s[0]=(ans/10)+'0'; //to convert into a string      
            s[1]=ans%10+'0';  
        string s='' no
        string s="" yesss
        stringstream 
        int main() {
    string s = "Hello world this is C++";
    stringstream ss(s);  // Create a stringstream object from the string

    string word;
    while (ss >> word) {  // Extract words from the string stream
        cout << word << endl;  // Output each word on a new line
    }

    return 0;
}   ?///reverse of the a string of stence from backward
string reverseWords(string s) {
        string finalans="";
        int n=s.length();
        stringstream ss(s);  //create a stringstream of s
        string word;
        while(ss>>word){ 
              //extract words from the stringstream
              if(!finalans.empty()){
           finalans=word+" "+finalans;}
           else{
            finalans=word;
           }
        }
        return finalans;
         to convert a string into its divisional parts we use stringstream 
         string s="1.2.3.4";
    string token;
    vector<string>v;
    stringstream ss(s);
    while(getline(ss,token,'.')){
        v.push_back(token);
    }
    for(int i=0;i<v.size();i++){
        cout<<v[i];   // 1 2 3 4 will get printed
    }
  
    return 0;
}
generate all substrings of a string 
class Solution {
public:
   bool isvalid(string s){
    //hash se karenge at most one letter appears odd;
    unordered_map<char,int>mpp;
    for(int i=0;i<s.length();i++){
        mpp[s[i]]++;
    }
    int count=0;
    for(auto it:mpp){
        if(it.second%2!=0){   //odd condition
        count++;
        }}
        if( count>1){
            return false;
        }
        return 1;

    }

   
    long long wonderfulSubstrings(string word) {
        string ans="";
        int i=0;
        int j=0;
        int c=0;
        for(int i=0;i<word.length();i++){
            for(int j=i;j<word.length();j++){
                if(isvalid(word.substr(i,j-i+1))){
                    cout<<word.substr(i,j-i+1)<<endl;
                    c++;
                }
            }
        }
        return c;
    }
};
