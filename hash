//set
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        set<int> s;
        
        // Insert elements of nums into the set to remove duplicates
        for (int i = 0; i < nums.size(); i++) {
            s.insert(nums[i]);
        }
        
        // Print elements of the set (if needed)
        for (auto it = s.begin(); it != s.end(); it++) {
            cout << *it << " ";
        }
        cout << endl; // to print a newline after all elements
        
        // Return the size of the set, which represents the number of unique elements
        return s.size();
    }
};


int main() {

    int n;
    cin >> n;
    int arr[n];
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    //precompute:
    int hash[13] = {0};
    for (int i = 0; i < n; i++) {
        hash[arr[i]] += 1;
    }

    int q;
    cin >> q;
    while (q--) {
        int number;
        cin >> number;
        // fetching:
        cout << hash[number] << endl;
    }
    return 0;
}
globally-10^7 array size
main-10^6 array size is max
ascii value of A-65
               a=97
               string s;
    cin >> s;

    //precompute:
    int hash[26] = {0};
    for (int i = 0; i < s.size(); i++) {
        hash[s[i] - 'a']++;
    }

    int q;
    cin >> q;
    while (q--) {
        char c;
        cin >> c;
        // fetch:
        cout << hash[c - 'a'] << endl;
    }
    return 0;
}
frequency max
int main()
{
    int arr[7]={1,2,2,4,4,2,3};
    unordered_map<int,int>mpp;
  for(int i=0;i<7;i++){
      mpp[arr[i]]++;
  }
  int max=0;
  for(auto it:mpp )
    {
        if(max<it.second){
            max=it.second;
        }
    }
    cout<<max;
    return 0;
    
} 

in a map if an element is already present and u want to check if it there


if(mpp.find(s[i])!=mpp.end()){

    means he has found someone.
}
else{
    nahi mila
}


string 
  vector<string> uncommonFromSentences(string s1, string s2) {

        vector<string>ans1;
      vector<string>ans2;
      vector<string>ans;
      unordered_map<string,int>map;
      int n=s1.size();
      int m=s2.size();
      string temp1="";
      string temp2="";
                   for(int i=0;i<n;i++){
             
            if(s1[i]!=' '){
                
                temp1=temp1+s1[i];
            }
            else{
                map[temp1]++;
                temp1="";
            }
            

          }
          if(temp1!=""){
              map[temp1]++;
        temp1 = ""; 
          }
           for(int i=0;i<m;i++){
             
            if(s2[i]!=' '){
                
                temp2=temp2+s2[i];
            }
            else{
                map[temp2]++;
                temp2="";
            }
            


          }
          if(temp2!=""){
              map[temp2]++;
        temp2 = ""; 
          }

                  

          for(auto it:map){
            if(it.second==1){
                ans.push_back(it.first);
            }
          }
          return ans;
          


    }
};

q on isompheric string
class Solution {
public:
    bool isIsomorphic(string s, string t) {
        int n=s.size();
        int m=t.size();
        unordered_map<char,char>mpp1;
          unordered_map<char,char>mpp2;
         // 2 maps
         if(n!=m)
{
    return false;
}
else{        
          for(int i=0;i<n;i++){
            char car1=s[i];
            char car2=t[i];
            if((mpp1.find(car1)!=mpp1.end()) && (mpp1[car1]!=car2) || (mpp2.find(car2)!=mpp2.end()) &&(mpp2[car2]!=car1)){
           //not single
           return false;
            }
            else{
                mpp1[car1]=car2;
                mpp2[car2]=car1;
            }                // single
          }
        

}
return true;

    }
};
1160
find words that can befrom from characters
class Solution {
public:
    int f(string words,unordered_map<char,int>mpp){
          int count=0;
        for(int i=0;i<words.length();i++){
            mpp[words[i]]--;
        }
        for(auto it:mpp){
            if(it.second<0){
                count++;
                break;
            }
        }
        if(count==0){
            return words.length();
        }


      return 0;
    }
    int countCharacters(vector<string>& words, string chars) {
          //words[0]="hello"
          //chars="hellobigg"
           // 
           int sum=0;
           unordered_map<char,int>mpp;
        for(int i=0;i<chars.length();i++){
            mpp[chars[i]]++;
        }
        
           for(int i=0;i<words.size();i++){
            sum=sum+f(words[i],mpp);

           }
           return sum;
    }
};
two sum 
 vector<int> twoSum(vector<int>& nums, int target) {
      unordered_map<int,int>mpp;
      for(int i=0;i<nums.size();i++){
        int remaining =target-nums[i];
        if(mpp.find(remaining)!=mpp.end()){    //equal hai saya
            return {mpp[remaining],i};
        }
        mpp[nums[i]]=i;
      }
      return {};
    }
};
group of anagrams 
vector<vector<string>> groupAnagrams(vector<string>& strs) {
        vector<vector<string>>p;
        unordered_map<string,vector<string>>mpp;
      for(int i=0;i<strs.size();i++){
        string s=strs[i];
        sort(s.begin(),s.end() );
        mpp[s].push_back(strs[i]);
      }
      for(auto it:mpp){
        p.push_back(it.second);
      }
          
        
      return p;

    }
};
