#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 100

struct Queue {
    int items[MAX_NODES];
    int front, rear;
};

void initializeQueue(struct Queue* q) {
    q->front = -1;
    q->rear = -1;
}

int isEmpty(struct Queue* q) {
    return q->rear == -1;
}

void enqueue(struct Queue* q, int value) {
    if (q->rear == MAX_NODES - 1)
        printf("Queue is full\n");
    else {
        if (q->front == -1) q->front = 0;
        q->rear++;
        q->items[q->rear] = value;
    }
}

int dequeue(struct Queue* q) {
    int item;
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return -1;
    } else {
        item = q->items[q->front];
        q->front++;
        if (q->front > q->rear) {
            q->front = q->rear = -1;
        }
        return item;
    }
}

void bfs(int adjMatrix[MAX_NODES][MAX_NODES], int startNode, int numNodes) {
    int visited[MAX_NODES] = {0};  // Mark all nodes as unvisited
    struct Queue q;
    initializeQueue(&q);

    // Start BFS from the startNode
    visited[startNode] = 1;
    enqueue(&q, startNode);

    printf("BFS Traversal: ");

    while (!isEmpty(&q)) {
        int currentNode = dequeue(&q);
        printf("%d ", currentNode);

        // Visit all neighbors of the currentNode
        for (int i = 0; i < numNodes; i++) {
            if (adjMatrix[currentNode][i] == 1 && !visited[i]) {
                visited[i] = 1;  // Mark neighbor as visited
                enqueue(&q, i);  // Add neighbor to the queue
            }
        }
    }
    printf("\n");
}

int main() {
    int numNodes, startNode;

    // Example of a provided adjacency matrix
    int adjMatrix[MAX_NODES][MAX_NODES] = {
        {0, 1, 1, 0, 0},
        {1, 0, 0, 1, 1},
        {1, 0, 0, 0, 0},
        {0, 1, 0, 0, 1},
        {0, 1, 0, 1, 0}
    };

    numNodes = 5;  // Number of nodes in the graph

    printf("Enter the starting node for BFS: ");
    scanf("%d", &startNode);

    bfs(adjMatrix, startNode, numNodes);

    return 0;
}

dfs code in adjancent matrix 
void DFS(int adjMatrix[MAX_NODES][MAX_NODES], int visited[MAX_NODES], int node, int numNodes) {
    printf("%d ", node);  // Process the current node (print or any other operation)
    visited[node] = 1;  // Mark the current node as visited  //u are passing i

    // Recur for all adjacent nodes
    for (int i = 0; i < numNodes; i++) {
        if (adjMatrix[node][i] == 1 && visited[i] == 0) {  // Check for an unvisited neighbor
            DFS(adjMatrix, visited, i, numNodes);  // Recur for the unvisited neighbor
        }
    }
}
