

2 types of q 
1 max sumbbarray sum 
         int n=Arr.size();
  
   int start=0;
   int end=0;
  long sum=0;    
 long maxsum=0;
  while(start<N && end<N){
      if(end-start+1<K){
          sum=sum+Arr[end];
          end++;
      }
       
       else if(end-start+1==K){
           sum=sum+Arr[end];
           maxsum=max(maxsum,sum);

           end++;
       }
       else if(end-start+1>K){
           
           sum=sum-Arr[start];
           start++;
       }

       }
       return maxsum;
    }
subbaray product less than k


class Solution {
public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        if(k==0 || k==1){
            return 0;
        }
        int n=nums.size();

        int count=0;
       long long prod=1;
        int i=0;
        int j=0;
        while(j<n && i<=j){
            prod=prod*nums[j];   //ye har bar karna hai
            while(prod>=k){  //condition break
                 prod /= nums[i++];
            }
            count=count+(j-i+1); //jo count hai
            j++;    
        }
    
         
        
    
        return count;
    }
};
if no negative no present in array 
then to find maximum sum of subbarrayy
int i=0;
           int j=0;
           int n=nums.size();
           int count=0;
            int sum=0;
           while(j<n){
         sum=sum+nums[j];
         while(sum>k){
            sum=sum-nums[i];
            i++;
         }
            if(sum==k){
                count++;
            }
           
            
            j++;
            
           }
           return count;
    }



    finding maximum product subbarayy
    #include <vector>
#include <algorithm>
#include <climits>  

class Solution {
public:
   int  maxProduct(vector<int>& nums) {
     double prefix=1;
      double suffix=1;
      double  maxprefix=INT_MIN;
       double  maxsuffix=INT_MIN;
        int n=nums.size();

      for(int i=0;i<nums.size();i++){
         if(nums[i]==0){
             maxprefix=max(maxprefix,0);
             prefix=1;
            continue;
        }
        else{
        prefix=prefix*nums[i];
            maxprefix=max(maxprefix,prefix);
        }
      }
      
      for(int i=n-1;i>=0;i--){
         if(nums[i]==0){
            maxsuffix=max(maxsuffix,0);
             suffix=1;
            continue;
        }
        else{
        suffix=suffix*nums[i];
            maxsuffix=max(maxsuffix,suffix);
        }
      }
    
    return max(maxprefix, maxsuffix);}
};
first negative no in every subbarray of size k 
int i=0;
   int j=0;
   queue<int>q;
   vector<long long>v;
  while(i<N && j<N){
      if(A[j]<0){
          q.push(A[j]);
      }
      
      if(j-i+1==K){
          if(q.size()==0){
              v.push_back(0);
          }
          else{
          v.push_back(q.front());
          if(A[i]==q.front()){
              q.pop();
          }
          }
          i++;
        
          
      }
      j++;
  }
       
      
    return v;
      Given two strings s and p, return an array of all the start indices of p's 
anagrams
 in s. You may return the answer in any order.
     vector<int> findAnagrams(string s, string p) {
        vector<int>v1(26,0);
        for(int z=0;z<p.length();z++){
           v1[p[z]-'a']++;
        }
        vector<int>ans;
          vector<int>v2(26,0);
          int i=0;
          int j=0;
          int n=s.length();
          while(j<n){
            v2[s[j]-'a']++;
            if(j-i+1>p.length()){
                 v2[s[i]-'a']--;
                 i++;
            }
            if(j-i+1==p.length()){
                if(v1==v2){
                    ans.push_back(i);
                }
            }
            
            j++;
          }
          return ans;
    }
};

                                              
                                                 
 }
 q-subbarray of 
 long long maximumSubarraySum(vector<int>& nums, int k) {
        int i=0;
        int j=0;
        int n=nums.size();
        unordered_map<int,int>mpp;
       long long finalsum=0;
       long long sum=0;
        while(j<n){
          if(j-i+1<k){
            mpp[nums[j]]++;
            sum=sum+nums[j];
            j++;
          }
        else if(j-i+1==k){
           mpp[nums[j]]++;
            sum=sum+nums[j];
        if(mpp.size()==k){
            cout<<sum<<endl;
            finalsum=max(finalsum,sum);
        }
        j++;
        }
else if(j-i+1>k){
    mpp[nums[i]]--;
    sum=sum-nums[i];
    i++;
}
          

        }
        return finalsum;

        
    }
};